import tkinter as tk
from tkinter import filedialog

class TextEditorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Text Editor")
        self.root.geometry('1200x660')

        # Set Variable for open file name
        self.open_status_name = None
        self.selected = None

        # Create Main Frame
        self.my_frame = tk.Frame(root)
        self.my_frame.pack()

        # Create Scrollbar
        self.text_scroll = tk.Scrollbar(self.my_frame)
        self.text_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # Create Text Box
        self.my_text = tk.Text(self.my_frame, width=97, height=25, font=('Helvetica', 16), selectbackground='black', selectforeground='white', undo=True, yscrollcommand=self.text_scroll.set)
        self.my_text.pack()

        # Configure Scrollbar
        self.text_scroll.config(command=self.my_text.yview)

        # Adding Menu | File Menu, Edit Menu
        self.create_menu()

        # Add Status Bar at Bottom
        self.status_bar = tk.Label(root, text="Ready", anchor=tk.E)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X, ipady=5)

        # Edit Bindings
        self.root.bind('<Control-Key-x>', self.cut_text)
        self.root.bind('<Control-Key-c>', self.copy_text)
        self.root.bind('<Control-Key-v>', self.paste_text)

    def create_menu(self):
        # Creating Menu
        self.my_menu = tk.Menu(self.root)
        self.root.config(menu=self.my_menu)

        # Add File Menu
        self.file_menu = tk.Menu(self.my_menu)
        self.my_menu.add_cascade(label='File', menu=self.file_menu)
        self.file_menu.add_command(label='New', command=self.new_file)
        self.file_menu.add_command(label='Open', command=self.open_file)
        self.file_menu.add_command(label='Save', command=self.save_file)
        self.file_menu.add_command(label='Save as', command=self.save_as_file)
        self.file_menu.add_separator()
        self.file_menu.add_command(label='Exit', command=self.root.quit)

        # Add Edit Menu
        self.edit_menu = tk.Menu(self.my_menu)
        self.my_menu.add_cascade(label='Edit', menu=self.edit_menu)
        self.edit_menu.add_command(label='Cut   (Ctrl+x)', command=lambda: self.cut_text(False))
        self.edit_menu.add_command(label='Copy  (Ctrl+c)', command=lambda: self.copy_text(False))
        self.edit_menu.add_command(label='Paste (Ctrl+v)', command=lambda: self.paste_text(False))
        self.edit_menu.add_command(label='Undo', command=self.my_text.edit_undo, accelerator="(Ctrl+z)")
        self.edit_menu.add_command(label='Redo', command=self.my_text.edit_redo)

    def new_file(self):
        self.my_text.delete('1.0', tk.END)
        self.root.title("Text Editor")
        self.update_status_bar("Ready")
        self.open_status_name = None

    def open_file(self):
        self.my_text.delete("1.0", tk.END)
        text_file = filedialog.askopenfilename(title="Open File", filetypes=(("Text Files", "*.txt"), ("All Files", "*"), ("Python Files", "*.py"), ("HTML Files", "*.html")))

        if text_file:
            self.open_status_name = text_file

        text_file = open(text_file, 'r')
        reading = text_file.read()
        self.my_text.insert(tk.END, reading)
        text_file.close()

    def save_as_file(self):
        text_file = filedialog.asksaveasfilename(defaultextension=".*", title="Save File as", filetypes=(("Text Files", "*.txt"), ("All Files", "*"), ("Python Files", "*.py"), ("HTML Files", "*.html")))
        text_file = open(text_file, 'w')
        text_file.write(self.my_text.get("1.0", tk.END))
        text_file.close()
        self.update_status_bar("File saved successfully!")

    def save_file(self):
        if self.open_status_name:
            text_file = open(self.open_status_name, 'w')
            text_file.write(self.my_text.get("1.0", tk.END))
            text_file.close()
            self.update_status_bar("File saved successfully!")
        else:
            self.save_as_file()

    def cut_text(self, e):
        if e:
            self.selected = self.root.selection_get()
        else:
            if self.my_text.selection_get():
                self.selected = self.my_text.selection_get()
                self.my_text.delete("sel.first", "sel.last")

    def copy_text(self, e):
        if e:
            self.selected = self.root.clipboard_get()
        if self.my_text.selection_get():
            self.selected = self.my_text.selection_get()
            self.root.clipboard_clear()
            self.root.clipboard_append(self.selected)

    def paste_text(self, e):
        if e:
            self.selected = self.root.clipboard_get()
        else:
            if self.selected:
                position = self.my_text.index(tk.INSERT)
                self.my_text.insert(position, self.selected)

    def update_status_bar(self, text):
        self.status_bar.config(text=text)


if __name__ == "__main__":
    root = tk.Tk()
    app = TextEditorApp(root)
    root.mainloop()
